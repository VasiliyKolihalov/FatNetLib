name: Build Solution

on:
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Check the project versions are the same
        uses: ./.github/actions/check-versions-synchronized

      - name: Check the FatNetLib.Core version is unique
        uses: ./.github/actions/check-version-unique
        with:
          repo-username: ${{ secrets.NTRUBKIN_NEXUS_DEATH_ANGEL_USERNAME }}
          repo-password: ${{ secrets.NTRUBKIN_NEXUS_DEATH_ANGEL_PASSWORD }}
          package-name: FatNetLib.Core
          csproj-path: FatNetLib.Core/FatNetLib.Core.csproj
          
      - name: Check the FatNetLib.Json version is unique
        uses: ./.github/actions/check-version-unique
        with:
          repo-username: ${{ secrets.NTRUBKIN_NEXUS_DEATH_ANGEL_USERNAME }}
          repo-password: ${{ secrets.NTRUBKIN_NEXUS_DEATH_ANGEL_PASSWORD }}
          package-name: FatNetLib.Json
          csproj-path: FatNetLib.Json/FatNetLib.Json.csproj
          
      - name: Check the FatNetLib.MicrosoftLogging version is unique
        uses: ./.github/actions/check-version-unique
        with:
          repo-username: ${{ secrets.NTRUBKIN_NEXUS_DEATH_ANGEL_USERNAME }}
          repo-password: ${{ secrets.NTRUBKIN_NEXUS_DEATH_ANGEL_PASSWORD }}
          package-name: FatNetLib.MicrosoftLogging
          csproj-path: FatNetLib.MicrosoftLogging/FatNetLib.MicrosoftLogging.csproj
          
      - name: Check the FatNetLib.UnityLogging version is unique
        uses: ./.github/actions/check-version-unique
        with:
          repo-username: ${{ secrets.NTRUBKIN_NEXUS_DEATH_ANGEL_USERNAME }}
          repo-password: ${{ secrets.NTRUBKIN_NEXUS_DEATH_ANGEL_PASSWORD }}
          package-name: FatNetLib.UnityLogging
          csproj-path: FatNetLib.UnityLogging/FatNetLib.UnityLogging.csproj

      - name: Setup .NET 3.1
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 3.1.x
          
      # For StyleCopPlus
      - name: Setup .NET 6.0
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
        
        # Seems like a bug in csproj environment variables injection in ubuntu
        # The only way to link the UnityEngine.dll is to put exactly into FatNetLib.UnityLogging
        # Todo: Don't use https://nextcloud.ntrubkin.ru
      - name: Setup Unity
        run: |
          export Unity=$(readlink -m $(pwd)/FatNetLib.UnityLogging/Unity/2021.3.13f1)
          wget --no-verbose --directory-prefix $Unity"/Editor/Data/Managed" https://nextcloud.ntrubkin.ru/s/BbkRsbHEKB5Y2CY/download/UnityEngine.dll;

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests in FatNetLib.Core.Tests
        run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory coverage FatNetLib.Core.Tests
        
      - name: Run unit tests in FatNetLib.Json.Tests
        run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory coverage FatNetLib.Json.Tests
      
      - name: Run integration tests
        run: dotnet test --no-build --verbosity normal --configuration Release FatNetLib.IntegrationTests

      # Todo: restore coverage reports
